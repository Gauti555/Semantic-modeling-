# -*- coding: utf-8 -*-
"""cosinegoogle search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Km1ovJMwy-fPJ42R2p4-BniKpKXR05a6
"""

pip install sentence_transformers

from sentence_transformers import SentenceTransformer
import scipy.spatial as sc
import pandas as pd
import re

embedder = SentenceTransformer('distilbert-base-nli-mean-tokens')

from google.colab import drive

drive.mount("/content/drive")

df = pd.read_json(r'/content/drive/My Drive/file.json /GoogleSearchResults.json')
df.reset_index(inplace=True)
df.drop(columns='index')

sentence = []
tidysentence=[]

for i in range(len(df)):
    st = df['snippet'][i]
    tidysentence.append(st)
    st = re.sub('[^a-zA-z0-9\s]','',st)
    st = '.'.join(st.rsplit('\n'))
    sentence.append(st)

len(sentence)

sentence_embb = embedder.encode(sentence)

query = ['molded interconnect device MID electronics Two-shot molding']
Closest = len(df)

query_embb = embedder.encode(query[0])

Closest = len(sentence)
res = []
score = []
count=0
counts=[]
for que, que_embb in zip(query,query_embb):
  distance = sc.distance.cdist([que_embb], sentence_embb,'correlation')[0]
  result = zip(range(len(distance)), distance)
  result = sorted(result, key=lambda x: x[1])
  
  for ide, leng in result[0:Closest]:
    score.append(1-leng)
    Parag = sentence[ide]
    count = count+1
    counts.append(count)
    
    res.append(df.iloc[ide])
    csv_result =[]
csv_result = pd.DataFrame(res)

final_res = pd.DataFrame()
final_res["Title"] = csv_result['title']
final_res["Domain"] = csv_result["domain"]
final_res["Url"] = csv_result["url"]
final_res["Snippet"] = csv_result["snippet"]
final_res['correlation_Scores'] = pd.Series(score, index=final_res.index)
final_res['correlation_rank'] = pd.Series(counts, index=final_res.index)
final_res.to_csv(query[0]+'with_correlation_similarity.csv')

final_res

